// カーネル関数を指定
#pragma kernel ForceCS      // 操舵力を計算
#pragma kernel IntegrateCS  // 速度, 位置を計算
#pragma kernel UpdateNextPos  // 速度, 位置を計算

// Boidデータの構造体
struct BoidData
{
	float3 velocity; // 速度
	float3 position; // 位置
	float AnimationOffset;
	float3 Color;
	float PiledTime;
	float UpdateTime;
	float Scale;
	int Type;
	float3 NextPos;
	float3 forward;
	float2 speeds;
};

#define SIMULATION_BLOCK_SIZE 256

StructuredBuffer<BoidData>   _BoidDataBufferRead;
RWStructuredBuffer<BoidData> _BoidDataBufferWrite;
StructuredBuffer<float3>     _BoidForceBufferRead;
RWStructuredBuffer<float3>   _BoidForceBufferWrite;

int _MaxBoidObjectNum; 

float _DeltaTime;    

float _SeparateNeighborhoodRadius;  
float _AlignmentNeighborhoodRadius; 
float _CohesionNeighborhoodRadius;  

float _MaxSpeed;        
float _MaxSteerForce;   

float _SeparateWeight; 
float _AlignmentWeight;
float _CohesionWeight;

float4 _WallCenter;     
float4 _WallSize;      
float  _AvoidWallWeight; 



float3 limit(float3 vec, float max)
{
	float length = sqrt(dot(vec, vec)); 
	return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}


float3 avoidWall(float3 position)
{
	float3 wc = _WallCenter.xyz;
	float3 ws = _WallSize.xyz;
	float3 acc = float3(0, 0, 0);

	acc.x = (position.x < wc.x - ws.x * 0.5) ? acc.x + 1.0 : acc.x;
	acc.x = (position.x > wc.x + ws.x * 0.5) ? acc.x - 1.0 : acc.x;

	acc.y = (position.y < wc.y - ws.y * 0.5) ? acc.y + 1.0 : acc.y;
	acc.y = (position.y > wc.y + ws.y * 0.5) ? acc.y - 1.0 : acc.y;

	acc.z = (position.z < wc.z - ws.z * 0.5) ? acc.z + 1.0 : acc.z;
	acc.z = (position.z > wc.z + ws.z * 0.5) ? acc.z - 1.0 : acc.z;

	return acc;
}


groupshared BoidData boid_data[SIMULATION_BLOCK_SIZE];


[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void ForceCS
(
	uint3 DTid : SV_DispatchThreadID,
	uint3 Gid : SV_GroupID,          
	uint3 GTid : SV_GroupThreadID,    
	uint  GI : SV_GroupIndex          
)
{
	const unsigned int P_ID = DTid.x; 
	float3 P_position = _BoidDataBufferRead[P_ID].position;
	float3 P_velocity = _BoidDataBufferRead[P_ID].velocity;

	float3 force = float3(0, 0, 0); 

	float3 sepPosSum = float3(0, 0, 0); 
	int sepCount = 0; 

	float3 aliVelSum = float3(0, 0, 0);
	int aliCount = 0; 

	float3 cohPosSum = float3(0, 0, 0); 
	int cohCount = 0; 
	[loop]
	for (uint N_block_ID = 0; N_block_ID < (uint)_MaxBoidObjectNum;
		N_block_ID += SIMULATION_BLOCK_SIZE)
	{
		boid_data[GI] = _BoidDataBufferRead[N_block_ID + GI];


		GroupMemoryBarrierWithGroupSync();

		// 他の個体との計算
		for (int N_tile_ID = 0; N_tile_ID < SIMULATION_BLOCK_SIZE; N_tile_ID++)
		{
			float3 N_position = boid_data[N_tile_ID].position;
			float3 N_velocity = boid_data[N_tile_ID].velocity; 

			float3 diff = P_position - N_position; 
			float  dist = sqrt(dot(diff, diff));   


			if (dist > 0.0 && dist <= _SeparateNeighborhoodRadius)
			{

				float3 repulse = normalize(P_position - N_position);
		
				repulse /= dist;
				sepPosSum += repulse; 
				sepCount++;           
			}

	
			if (dist > 0.0 && dist <= _AlignmentNeighborhoodRadius)
			{
				aliVelSum += N_velocity; 
				aliCount++;            
			}

			
			if (dist > 0.0 && dist <= _CohesionNeighborhoodRadius)
			{
				cohPosSum += N_position;
				cohCount++;              
			}
		}
		GroupMemoryBarrierWithGroupSync();
	}

	// 操舵力（分離）
	float3 sepSteer = (float3)0.0;
	if (sepCount > 0)
	{
		sepSteer = sepPosSum / (float)sepCount;     
		sepSteer = normalize(sepSteer) * _MaxSpeed;
		sepSteer = sepSteer - P_velocity;           
		sepSteer = limit(sepSteer, _MaxSteerForce); 
	}


	float3 aliSteer = (float3)0.0;
	if (aliCount > 0)
	{
		aliSteer = aliVelSum / (float)aliCount;    
		aliSteer = normalize(aliSteer) * _MaxSpeed;
		aliSteer = aliSteer - P_velocity;          
		aliSteer = limit(aliSteer, _MaxSteerForce); 
	}
	// 操舵力（結合）
	float3 cohSteer = (float3)0.0;
	if (cohCount > 0)
	{
		cohPosSum = cohPosSum / (float)cohCount;   
		cohSteer = cohPosSum - P_position;     
		cohSteer = normalize(cohSteer) * _MaxSpeed;
		cohSteer = cohSteer - P_velocity;          
		cohSteer = limit(cohSteer, _MaxSteerForce); 
	}
	force += aliSteer * _AlignmentWeight; 
	force += cohSteer * _CohesionWeight;  
	force += sepSteer * _SeparateWeight; 

	_BoidForceBufferWrite[P_ID] = force; 
}

float3 UpdateExec(BoidData b, float3 f){
	return  b.position +  b.velocity * 0.5 * b.UpdateTime +  f * b.UpdateTime * b.UpdateTime;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void UpdateNextPos
(
	uint3 DTid : SV_DispatchThreadID
)
{
	const unsigned int P_ID = DTid.x;        
	
											           
	BoidData b = _BoidDataBufferWrite[P_ID];   
	float3 force = _BoidForceBufferRead[P_ID];
	b.PiledTime += _DeltaTime;

	if(b.Type != 2 && b.PiledTime > b.UpdateTime){
		b.PiledTime = 0;
		b.NextPos = UpdateExec(b, force);
	}
	_BoidDataBufferWrite[P_ID] = b;           

}


[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void IntegrateCS
(
	uint3 DTid : SV_DispatchThreadID
)
{
	const unsigned int P_ID = DTid.x;          
	
											           
	BoidData b = _BoidDataBufferWrite[P_ID];  
	float3 oldVel = b.velocity;
	float3 force = _BoidForceBufferRead[P_ID]; 
	float3 forward = b.forward;
	float speed = length(b.velocity);

	force += avoidWall(b.position) * _AvoidWallWeight; 
	if(b.Type != 2){
		if(dot(b.NextPos - b.position, forward) < 0.1) {
			b.PiledTime = 0;
			b.NextPos = UpdateExec(b, force);
		}
		float restTime = b.UpdateTime - b.PiledTime;
		
		if(length(b.NextPos- b.position) > 0.01)
			forward = lerp(forward, normalize(b.NextPos- b.position), 0.07);
		forward = normalize(forward);
		
		float a = 0;
		if(restTime > 0.0001) a = 2*(abs(dot(b.NextPos- b.position, forward))/(restTime*restTime) - speed/restTime);
		a *= 0.8;
		
		forward.y = min(0.7, max(-0.7, forward.y));
		b.velocity = (speed+a*_DeltaTime)*forward;
		b.AnimationOffset = max(0, length(b.velocity));
		b.velocity = limit(b.velocity, b.speeds.y);
		
		b.forward = forward;
	}
	else{		
		b.velocity += force * _DeltaTime;          
		b.forward = lerp(normalize(b.velocity), b.forward, 0.5);
		b.forward = normalize(b.forward);
		b.AnimationOffset = max(0, length(b.velocity) - length(oldVel));
		b.velocity = limit(b.velocity, b.speeds.y); 
		b.velocity = b.forward * length(b.velocity);
	}
	b.position += b.velocity * _DeltaTime;    
	
	if(length(b.velocity) > 0.01) b.forward = normalize(b.velocity);
	
											           
	_BoidDataBufferWrite[P_ID] = b;           
}