#pragma kernel Initialize
#pragma kernel AddWave
#pragma kernel Update
#pragma kernel Draw

RWTexture2D<float2> waveTexture;
RWTexture2D<float4> drawTexture;
Texture2D<float4> cam0Texture;
Texture2D<float4> cam1Texture;
Texture2D<float4> OrthTexture;


SamplerState _LinearClamp;

float waveCoef;
float deltaSize;
float deltaTime;
float time;

float3 _camPos0;
float3 _camPos1;
float3 _realScale;
float _gogleRad = 1.5;

[numthreads(8, 8, 1)]
void Initialize(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    waveTexture[dispatchThreadId.xy] = float2(0, 0);
}

[numthreads(8, 8, 1)]
void AddWave(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float width, height;
    waveTexture.GetDimensions(width, height);


    float x = (dispatchThreadId.x / width) * 2.0 - 1.0;
    float y = (dispatchThreadId.y / height) * 2.0 - 1.0;

    float cx = 0.7 * cos(time * 0.5);
    float cy = 0.7 * sin(time * 0.5);

    float dx = cx - x;
    float dy = cy - y;

    float r = sqrt(dx * dx + dy * dy);

    float h = 5.0 * pow(max(0.05 - r, 0.0), 0.5);
    waveTexture[dispatchThreadId.xy] += float2(h, 0);
}

[numthreads(8, 8, 1)]
void Update(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float width, height;
    waveTexture.GetDimensions(width, height);

    float2 wave = waveTexture[dispatchThreadId.xy];
    float a = (deltaTime * deltaTime * waveCoef * waveCoef) / (deltaSize * deltaSize); 
    float h = 2.0 * wave.x - wave.y + a * (
        (dispatchThreadId.x != 0 ?          waveTexture[dispatchThreadId.xy + uint2(-1, 0)].x : waveTexture[dispatchThreadId.xy].x) +
        (dispatchThreadId.x < width - 1 ?   waveTexture[dispatchThreadId.xy + uint2( 1, 0)].x : waveTexture[dispatchThreadId.xy].x) +
        (dispatchThreadId.y != 0 ?          waveTexture[dispatchThreadId.xy + uint2(0, -1)].x : waveTexture[dispatchThreadId.xy].x) +
        (dispatchThreadId.y < height - 1 ?  waveTexture[dispatchThreadId.xy + uint2(0,  1)].x : waveTexture[dispatchThreadId.xy].x) +
        - 4.0 * wave.x) - 0.1 * deltaTime * (wave.x - wave.y);

    waveTexture[dispatchThreadId.xy] = float2(h, wave.x);
}


[numthreads(8, 8, 1)]
void Draw(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint width, height;
    drawTexture.GetDimensions(width, height); 

    float2 uv = float2((float)dispatchThreadId.x/(float)width, (float)dispatchThreadId.y/(float)height) * _realScale;
    float2 uv_ = float2((float)dispatchThreadId.y/(float)height, (float)dispatchThreadId.x/(float)width);
    drawTexture[dispatchThreadId.xy] = lerp(
        float4(0, 0, 0, 1),
        float4(1, 1, 1, 1),
        clamp(waveTexture[dispatchThreadId.xy*((float)256/(float)1000)].x, 0, 1)
    );
    _gogleRad *= 1.5;

    
    float2 uvpos0 = _camPos0.xz * _realScale;
    float2 uvpos1 = _camPos1.xz * _realScale;
    float2 diff0 = uvpos0-uv;
    float2 diff1 = uvpos1-uv;
    diff0 = -diff0;
    diff1 = -diff1;
    if(_gogleRad*2.0 > length(uvpos0 - uvpos1)){
        // _gogleRad = length(uvpos0 - uvpos1)/2.0;
    }
    drawTexture[dispatchThreadId.xy] *= 0.1;
    drawTexture[dispatchThreadId.xy] += 0.2*OrthTexture.SampleLevel(_LinearClamp, uv_, 0);
    drawTexture[dispatchThreadId.xy] += float4(0.5,0.5,1,1)*drawTexture[dispatchThreadId.xy];

    if(_gogleRad > 0.00001){
        if(length(uvpos0-uv) < _gogleRad){
            float rate = (1 - (length(uvpos0-uv)/_gogleRad));        
            rate = min(1, rate*2);
            // drawTexture[dispatchThreadId.xy] = (1-rate)* drawTexture[dispatchThreadId.xy]+rate*cam0Texture.SampleLevel(_LinearClamp, 0.5+(diff0/_realScale), 0);
            drawTexture[dispatchThreadId.xy] = (1-rate)* drawTexture[dispatchThreadId.xy] + rate*cam0Texture.SampleLevel(_LinearClamp, 0.5+(diff0/_realScale), 0);
        }
        if(length(uvpos1-uv) < _gogleRad){
            float rate = (1 - (length(uvpos1-uv)/_gogleRad));
             rate = min(1, rate*2); 
            // drawTexture[dispatchThreadId.xy] = (1-rate)* drawTexture[dispatchThreadId.xy] + rate*cam1Texture.SampleLevel(_LinearClamp, 0.5+(diff1/_realScale), 0);
        }
    }
}